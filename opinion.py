import logging
import logging.handlers
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext
import re
import random
import redis_db
from utils import in_whitelist, parse_userid

r = redis_db.connect()
logger = logging.getLogger(__name__)
again_setter = None
ENDINGS_REGEX = re.compile(r"(?:–∞—Ö|–∞|–µ–≤|–µ–π|–µ|–æ–≤|–æ|–∏—è—Ö|–∏—è|–∏–µ|–∏–π|–π|—å|—ã|–∏–∏|–∏|—è—Ö|—è|—É|—ã—Ö|–∏—Ö|s)$", re.IGNORECASE)


def handle_opinion(update: Update, context: CallbackContext):
    if (not in_whitelist(update)):
        return
    logger.info(f"[opinion] {update.message.text}")
    match = re.match(r'/[\S]+\s+(.+)', update.message.text)
    if match is None:
        update.message.reply_text("–û —á–µ–º —Ç—ã —Ö–æ—Ç–µ–ª —É–∑–Ω–∞—Ç—å –º–æ–µ –º–Ω–µ–Ω–∏–µ?", quote=True)
        return
    user_input = match.group(1)
    opinion(update, context, user_input, [], None)


def handle_opinion_of(update: Update, context):
    if (not in_whitelist(update)):
        return
    logger.info(f"[opinionof] {update.message.text}")
    match = re.match(r'/[\S]+\s+([\S]+)\s+(.+)', update.message.text, re.DOTALL)
    if match is None:
        match = re.match(r'/[\S]+\s+([\S]+)', update.message.text)
        if match and update.message.reply_to_message is not None:
            user_id = update.message.reply_to_message.from_user.id
            user_input = match.group(1)
        else:
            update.message.reply_text("–ü–µ—Ä–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –∏–¥–µ—Ç –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞, –∞ –ø–æ—Ç–æ–º —Ç–æ–ø–∏–∫, –ø—Ä–æ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –º–Ω–µ–Ω–∏–µ. –ù–∏—á–µ–º—É —Ç–µ–±—è –≤ —à–∫–æ–ª–µ –Ω–µ —É—á–∏–ª–∏?", quote=True)
            return
    else:
        user_name = match.group(1)
        user_id = parse_userid(user_name, context)
        user_input = match.group(2)

        
    if user_id is not None and int(user_id) == context.bot.id:
        seed = user_input.strip().lower()
        my_random = random.Random()
        my_random.seed(seed)
        intro = random.choice([f"–ß—Ç–æ —è –¥—É–º–∞—é –æ \"{user_input}\"?", f"–ú–æ–µ –º–Ω–µ–Ω–∏–µ –æ \"{user_input}\"?", f"–ú–µ–Ω—è —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –æ \"{user_input}\"?"])
        kansou = random.choice(["–•–º–º...", "–ù—É—É...", "", "–≠—ç—ç...", "ü§î"])
        results = [("–î–∞ –Ω–∏—á–µ–≥–æ —è –Ω–µ –¥—É–º–∞—é –æ–± —ç—Ç–æ–º ._.", 25), ("–î–∞ –º–Ω–µ –∫–∞–∫-—Ç–æ –≤—Å–µ —Ä–∞–≤–Ω–æ...", 25), ("–î—É–º–∞—é —ç—Ç–æ —Å—É–ø–µ—Ä! ‚ù§Ô∏è", 80), ("It's ok I guess...", 60), ("–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è!", 100), ("–ö—Ä—É—Ç–∞—è –≤–µ—â—å! üî•", 30), ("–ú–Ω–µ –Ω–µ –æ—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—Å—è...", 80), ("–¢–∞–∫–æ–µ —Å–µ–±–µ...", 30), ("–≠—Ç–æ –º–æ—è —Å–∞–º–∞—è –ª—é–±–∏–º–∞—è –≤–µ—â—å! üî•", 10), ("–Ø –Ω–µ–Ω–∞–≤–∏–∂—É —ç—Ç–æ! üò°", 10), ("–≠—Ç–æ —Ö—É–¥—à–µ–µ, —á—Ç–æ –∫–æ–≥–¥–∞ –ª–∏–±–æ –±—ã–ª–æ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–æ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ–º", 1),  ("–≠—Ç–∞ —Å–∞–º–∞—è –ª—É—á—à–∞—è –≤–µ—â—å –≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π!", 1),]
        res = my_random.choices([x for x, w in results], weights=[w for x, w in results])[0]
        update.message.reply_text(f"{intro} {kansou}\n{res}", quote=False)
        return

    if user_id is None:
        update.message.reply_text(f"\"{user_name}\"? –ù–µ –ø—Ä–∏–ø–æ–º–∏–Ω–∞—é —Ç–∞–∫–∏—Ö", quote=True)
        return
    opinion(update, context, user_input, [], user_id)


def try_find_opinion(messages, things, from_user_id, previous_results, user_input):
    terrible_result = None
    long_result = None
    regexes = [re.compile(r'(?:[\s{}]+|^){}'.format(re.escape(r'!"#$%&()*+, -./:;<=>?@[\]^_`{|}~'), re.escape(thing)), flags=re.IGNORECASE) for thing in things]
    for rnd_message in messages:
        #if (all(thing in lower_message for thing in things)):
        # Only search for matches at the begining of words
        if all(re.search(regex, rnd_message.text) for regex in regexes) and rnd_message.text.lower() not in previous_results:
            if from_user_id is not None and rnd_message.uid != from_user_id:
                continue
            if user_input.lower() == rnd_message.text.lower():
                terrible_result = user_input
                continue

            if len(rnd_message.text) <= 550:
                return rnd_message.text
            else:
                long_result = rnd_message.text
    
    if long_result is not None:
        return long_result
    
    if terrible_result is not None:
        return terrible_result
    return None


def opinion(update: Update, context, user_input, previous_results=[], from_user_id=None):
    things = [thing for thing in re.split(r'\s+', user_input) if thing != ""]
    logger.info(f"  Parse result: {things}")
    shuffled_messages = [m for m in redis_db.messages]
    random.shuffle(shuffled_messages)
    result = None
    result = try_find_opinion(shuffled_messages, things, from_user_id, previous_results, user_input)

    # If not found anything, repeat but now without endings
    if result is None:
        things = [ENDINGS_REGEX.sub("", thing) for thing in things]
        result = try_find_opinion(shuffled_messages, things, from_user_id, previous_results, user_input)

    if result is None:
        if len(previous_results) > 0 and from_user_id is None:
            update.message.reply_text(f"–Ø —É–∂–µ –≤—Å–µ –≤—ã—Å–∫–∞–∑–∞–ª, —á—Ç–æ —è –¥—É–º–∞—é –æ \"{user_input}\"", quote=False)
        elif len(previous_results) > 0 and from_user_id is not None:
            update.message.reply_text(f"–Ø —É–∂–µ –≤—Å–µ –ø–µ—Ä–µ–¥–∞–ª, —á—Ç–æ {redis_db.get_username_by_id(from_user_id)} –¥—É–º–∞–µ—Ç –æ \"{user_input}\"", quote=False)
        elif from_user_id is not None:
            update.message.reply_text(f"–ö–∞–∂–µ—Ç—Å—è {redis_db.get_username_by_id(from_user_id)} –Ω–∏—á–µ–≥–æ –Ω–µ –¥—É–º–∞–µ—Ç –æ \"{user_input}\" x_x", quote=False)
        else:
            update.message.reply_text(f"–Ø –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—é –æ \"{user_input}\" >_<", quote=False)
        return
    
    if again_setter:
        again_setter(lambda: opinion(update, context, user_input, previous_results + [result.lower()], from_user_id))
    update.message.reply_text(result, quote=False)


def subscribe(u: Updater, _again_setter):
    u.dispatcher.add_handler(CommandHandler(("opinion", "o"), handle_opinion))
    u.dispatcher.add_handler(CommandHandler(("opinionof", "oo", "oof"), handle_opinion_of))
    global again_setter
    again_setter = _again_setter
